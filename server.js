import express from "express";
import cors from "cors";
import mongoose from "mongoose";
import dotenv from "dotenv";
import swaggerUi from "swagger-ui-express";
import swaggerJsDoc from "swagger-jsdoc";
import authRoutes from "./routes/auth.routes.js";
import userRoutes from "./routes/user.routes.js";
import productRoutes from "./routes/product.routes.js";
import designerRoutes from "./routes/designer.routes.js";
import orderRoutes from "./routes/order.routes.js";
import virtualFittingRoutes from "./routes/virtualFitting.routes.js";
// import aiSuggestionRoutes from "./routes/aiSuggestion.routes.js";
import customDesignRoutes from "./routes/customDesign.routes.js";
import paymentRoutes from "./routes/payment.routes.js";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// Get the current directory (__dirname equivalent for ES Modules)
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// --- CORS Configuration ---
// Define the origins allowed to access your API
const allowedOrigins = [
  'http://localhost:3000', // Your local React dev server
  'https://kimelia-lux.vercel.app' // Your deployed Vercel frontend URL (No trailing slash!)
  // Add any other frontend URLs if needed
];

// Configure CORS options
const corsOptions = {
  // Function to dynamically check the origin
  origin: function (origin, callback) {
    // Allow requests with no origin (like mobile apps, curl, server-to-server)
    // OR if the origin is in our list of allowed origins
    if (!origin || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true); // Allow the request
    } else {
      // Disallow the request if the origin is not in the allowed list
      callback(new Error(`Not allowed by CORS: ${origin}`));
    }
  },
  credentials: true, // Allow cookies and authorization headers to be sent from the frontend
  methods: "GET,HEAD,PUT,PATCH,POST,DELETE", // Specify allowed HTTP methods
  allowedHeaders: "Content-Type, Authorization, X-Requested-With", // Specify allowed headers
  optionsSuccessStatus: 204 // Return 204 for preflight OPTIONS requests (some legacy browsers choke on 204)
};

// Apply CORS middleware BEFORE your routes
// app.options('*', cors(corsOptions)); // Handle preflight requests across all routes - often handled by the below use() too
app.use(cors(corsOptions)); // Apply the main CORS logic

// --- Middleware ---
// Parse JSON bodies (increase limit if needed for large uploads like images)
app.use(express.json({ limit: "50mb" }));
// Parse URL-encoded bodies
app.use(express.urlencoded({ extended: true, limit: "50mb" }));

// --- Swagger Configuration ---
const swaggerOptions = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "Kimelia Luxe API",
      version: "1.0.0",
      description: "Kimelia Luxe Fashion Platform API Documentation",
      contact: {
        name: "API Support",
        email: "support@kimelialuxe.com", // Replace with actual support email if different
      },
    },
    servers: [
      {
        // Ensure the port is correctly interpolated if PORT is set
        url: `http://localhost:${PORT}`,
        description: "Development server",
      },
      {
        // Make sure PROD_URL is set in your Render environment variables
        url: process.env.PROD_URL || "https://kimelia-api.onrender.com", // Provide a default or ensure it's set
        description: "Production server",
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: "http",
          scheme: "bearer",
          bearerFormat: "JWT",
        },
      },
    },
    // Add security definition for routes that require authentication
    security: [{
      bearerAuth: []
    }]
  },
  // Use absolute paths generated by join(__dirname, ...)
  apis: [
    join(__dirname, "routes/*.routes.js"), // Ensure file names match pattern
    join(__dirname, "models/*.js")
  ],
};

const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));

// --- Routes ---
app.use("/api/auth", authRoutes);
app.use("/api/users", userRoutes);
app.use("/api/products", productRoutes);
app.use("/api/designers", designerRoutes);
app.use("/api/orders", orderRoutes);
app.use("/api/virtual-fitting", virtualFittingRoutes);
// app.use("/api/ai-suggestions", aiSuggestionRoutes);
app.use("/api/custom-designs", customDesignRoutes);
app.use("/api/payments", paymentRoutes);

// --- Root Route ---
app.get("/", (req, res) => {
  res.send("Welcome to Kimelia Luxe API");
});

// --- MongoDB Connection ---
const MONGODB_URI = process.env.MONGODB_URI; // Get from environment
if (!MONGODB_URI) {
  console.error("FATAL ERROR: MongoDB URI is missing in environment variables (MONGODB_URI).");
  process.exit(1); // Exit if no database URL is set
}

const connectDB = async () => {
  try {
    await mongoose.connect(MONGODB_URI); // Removed deprecated options
    console.log("Successfully connected to MongoDB");

    // Start the server only after successful DB connection
    app.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
      console.log(`API Documentation available at http://localhost:${PORT}/api-docs`);
      if (process.env.PROD_URL) {
        console.log(`Production API base URL: ${process.env.PROD_URL}`);
      } else if (swaggerOptions.definition.servers[1].url !== "https://kimelia-api.onrender.com") {
         console.log(`Production API base URL (from Swagger default): ${swaggerOptions.definition.servers[1].url}`);
      } else {
         console.warn("Production URL (PROD_URL) not set in environment variables.");
      }
    });
  } catch (error) {
    console.error("MongoDB connection error:", error.message);
    process.exit(1); // Exit the process with an error code
  }
};

// --- Start Server ---
connectDB();

export default app; // Export for potential use in testing or other modules
